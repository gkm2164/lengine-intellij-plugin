{
    parserClass="io.lengine.lengineintellijplugin.LengineParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Lengine"
    psiImplClassSuffix="Impl"
    psiPackage="io.lengine.lengineintellijplugin.psi"
    psiImplPackage="io.lengine.lengineintellijplugin.psi.impl"

    elementTypeHolderClass="io.lengine.lengineintellijplugin.psi.LengineTypes"
    elementTypeClass="io.lengine.lengineintellijplugin.psi.LengineElementType"
    tokenTypeClass="io.lengine.lengineintellijplugin.psi.LengineTokenType"

    psiImplUtilClass="io.lengine.lengineintellijplugin.psi.impl.LenginePsiImplUtilKt"
}

lengineFile ::= item_*

private item_ ::= (statement | COMMENT | CRLF)

statement ::= module_statement
           |  import_statement
           |  require_statement
           |  stmt

module_statement ::= (LEFT_PARENTHESIS MODULE SYMBOL RIGHT_PARENTHESIS) {methods = [registerModule]}

import_statement ::= (LEFT_PARENTHESIS IMPORT SYMBOL RIGHT_PARENTHESIS)

require_statement ::= (LEFT_PARENTHESIS REQUIRE values RIGHT_PARENTHESIS)

stmt   ::= fn_stmt
       | def_stmt
       | export_stmt
       | import_stmt
       | values

export_stmt ::= (LEFT_PARENTHESIS EXPORT export_symbol values? RIGHT_PARENTHESIS)

export_symbol ::= SYMBOL

import_stmt ::= (LEFT_PARENTHESIS IMPORT SYMBOL RIGHT_PARENTHESIS)

native_stmt ::= (LEFT_PARENTHESIS NATIVE SYMBOL type RIGHT_PARENTHESIS)

type ::= VAR | FN

fn_stmt ::= (LEFT_PARENTHESIS (FN | DEFMACRO) fn_symbol LEFT_PARENTHESIS SYMBOL* RIGHT_PARENTHESIS values RIGHT_PARENTHESIS)

fn_symbol ::= SYMBOL

def_stmt ::= (LEFT_PARENTHESIS DEF def_symbol values RIGHT_PARENTHESIS)

def_symbol ::= SYMBOL

let_stmt ::= ((LEFT_PARENTHESIS | LAZY_PARENTHESIS) LET LEFT_PARENTHESIS let_decl_stmt* RIGHT_PARENTHESIS values RIGHT_PARENTHESIS)

let_decl_stmt ::= (LEFT_PARENTHESIS SYMBOL values RIGHT_PARENTHESIS)

loop_stmt ::= (LEFT_PARENTHESIS LOOP for_stmt* values RIGHT_PARENTHESIS)

for_stmt ::= FOR SYMBOL IN values

try_stmt ::= (LEFT_PARENTHESIS TRY values recover_stmt RIGHT_PARENTHESIS)

recover_stmt ::= (LEFT_PARENTHESIS RECOVER SYMBOL values RIGHT_PARENTHESIS)

values ::= SYMBOL
        |  OBJECT_SYMBOL
        |  string_value
        |  TRUE
        |  FALSE
        |  CHARACTER
        |  array
        |  numbers_value
        |  complex_number
        |  lambda_stmt
        |  object_value
        |  do_stmt
        |  if_stmt
        |  let_stmt
        |  loop_stmt
        |  try_stmt
        |  native_stmt
        |  for_when_stmt
        |  case_stmt
        |  clause

array  ::= LEFT_BRACKET values* RIGHT_BRACKET

lambda_stmt ::= LAMBDA_PARENTHESIS LEFT_PARENTHESIS SYMBOL* RIGHT_PARENTHESIS values RIGHT_PARENTHESIS
             |  LEFT_PARENTHESIS LAMBDA LEFT_PARENTHESIS SYMBOL* RIGHT_PARENTHESIS values RIGHT_PARENTHESIS

numbers_value ::= NUMBER
               |  RATIO_NUMBER

object_value ::= LEFT_BRACE object_value_entry* RIGHT_BRACE

object_value_entry ::= OBJECT_SYMBOL values

complex_number ::= COMPLEX_NUMBER_PARENTHESIS numbers_value numbers_value RIGHT_PARENTHESIS

do_stmt ::= (LEFT_PARENTHESIS DO values* RETURN values RIGHT_PARENTHESIS)

if_stmt ::= (LEFT_PARENTHESIS IF values values values RIGHT_PARENTHESIS)

clause  ::= (LEFT_PARENTHESIS values* RIGHT_PARENTHESIS)
        |   (LAZY_PARENTHESIS values* RIGHT_PARENTHESIS)

for_when_stmt ::= (LEFT_PARENTHESIS FOR values WHEN (LEFT_PARENTHESIS values values RIGHT_PARENTHESIS)* OTHERWISE values RIGHT_PARENTHESIS)

string_value ::= STRING

case_stmt ::= (LEFT_PARENTHESIS CASE cond_stmt* DEFAULT values RIGHT_PARENTHESIS)

cond_stmt ::= (LEFT_PARENTHESIS values values RIGHT_PARENTHESIS)