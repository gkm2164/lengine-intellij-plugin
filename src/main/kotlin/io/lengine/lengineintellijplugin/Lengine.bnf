{
    parserClass="io.lengine.lengineintellijplugin.LengineParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Lengine"
    psiImplClassSuffix="Impl"
    psiPackage="io.lengine.lengineintellijplugin.psi"
    psiImplPackage="io.lengine.lengineintellijplugin.psi.impl"

    elementTypeHolderClass="io.lengine.lengineintellijplugin.psi.LengineTypes"
    elementTypeClass="io.lengine.lengineintellijplugin.psi.LengineElementType"
    tokenTypeClass="io.lengine.lengineintellijplugin.psi.LengineTokenType"
}

lengineFile ::= item_*

private item_ ::= (statement | COMMENT | CRLF)

statement ::= module_statement
           |  import_statement
           |  require_statement
           |  stmt

module_statement ::= (LEFT_PARENTHESIS MODULE SYMBOL RIGHT_PARENTHESIS)

import_statement ::= (LEFT_PARENTHESIS IMPORT SYMBOL RIGHT_PARENTHESIS)

require_statement ::= (LEFT_PARENTHESIS REQUIRE STRING RIGHT_PARENTHESIS)

stmt   ::= (LEFT_PARENTHESIS stmt* RIGHT_PARENTHESIS)
       | fn_stmt
       | def_stmt
       | let_stmt
       | loop_stmt
       | try_stmt
       | values

fn_stmt ::= (LEFT_PARENTHESIS FN fn_symbol LEFT_PARENTHESIS SYMBOL+ RIGHT_PARENTHESIS stmt RIGHT_PARENTHESIS)

fn_symbol ::= SYMBOL

def_stmt ::= (LEFT_PARENTHESIS DEF def_symbol stmt RIGHT_PARENTHESIS)

def_symbol ::= SYMBOL

let_stmt ::= (LEFT_PARENTHESIS LET LEFT_PARENTHESIS let_decl_stmt* RIGHT_PARENTHESIS stmt RIGHT_PARENTHESIS)

let_decl_stmt ::= (LEFT_PARENTHESIS SYMBOL stmt RIGHT_PARENTHESIS)

loop_stmt ::= (LEFT_PARENTHESIS LOOP for_stmt* stmt RIGHT_PARENTHESIS)

for_stmt ::= FOR SYMBOL IN stmt

try_stmt ::= (LEFT_PARENTHESIS TRY stmt recover_stmt RIGHT_PARENTHESIS)

recover_stmt ::= (LEFT_PARENTHESIS RECOVER SYMBOL stmt RIGHT_PARENTHESIS)

values ::= SYMBOL
        |  array
        |  numbers_value
        |  complex_number
        |  OBJECT_SYMBOL
        |  lambda_stmt
        |  STRING
        |  CHARACTER
        |  object_value

array  ::= LEFT_BRACKET stmt* RIGHT_BRACKET

lambda_stmt ::= LAMBDA_PARENTHESIS LEFT_PARENTHESIS SYMBOL+ RIGHT_PARENTHESIS stmt RIGHT_PARENTHESIS
             |  LEFT_PARENTHESIS LAMBDA LEFT_PARENTHESIS SYMBOL+ RIGHT_PARENTHESIS stmt RIGHT_PARENTHESIS

numbers_value ::= NUMBER
               |  RATIO_NUMBER

object_value ::= LEFT_BRACE object_value_entry* RIGHT_BRACE

object_value_entry ::= OBJECT_SYMBOL values

complex_number ::= COMPLEX_NUMBER_PARENTHESIS numbers_value numbers_value RIGHT_PARENTHESIS

